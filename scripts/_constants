#!/bin/bash

# (REUSE)
# Code that must be included in every script to make it fully independent and compatible with refactoring in IDEs.
# Advices for code writing:
# - It is recommended to use lower case variables' names, cause some IDE ignore "not found variables" errors if they are upper cased.
{
  # Fail command if any of pipeline blocks fail
  set -o pipefail

  # Special function to get current script file hash
  function get_text_hash() {
    echo "${*}" | sha256sum | cut -d ' ' -f 1 || return "$?"
    return 0
  }

  # Source this file only if wasn't sourced already
  {
    current_file_path="$(realpath "${BASH_SOURCE[0]}")" || exit "$?"
    current_file_hash="$(echo "${current_file_path}" | sha256sum | cut -d ' ' -f 1)" || exit "$?"
    current_file_is_sourced_variable_name="FILE_IS_SOURCED_${current_file_hash^^}"
    current_file_is_sourced="$(eval "echo \"\${${current_file_is_sourced_variable_name}}\"")" || exit "$?"
    if [ -n "${current_file_is_sourced}" ]; then
      return
    fi
    eval "export ${current_file_is_sourced_variable_name}=1" || exit "$?"
    if ((IS_DEBUG_BASH)); then
      if [ "${0}" == "${BASH_SOURCE[0]}" ]; then
        echo "Executing \"${current_file_path}\"..." >&2
      else
        echo "Sourcing \"${current_file_path}\"..." >&2
      fi
    fi
    # Unset script-scope variables, to skip references on them between files
    unset current_file_path current_file_hash current_file_is_sourced_variable_name current_file_is_sourced
  }

  # Prepare before imports
  {
    # Because variables is the same when sourcing, we depend on file hash.
    # Also, we don't use variable for variable name here, because it will fall in the same problem.
    # We must pass "${BASH_SOURCE[*]}" as a variable and not define it in the function itself, because Bash will replace it there.
    eval "source_previous_directory_$(get_text_hash "${BASH_SOURCE[*]}")=\"${PWD}\"" || exit "$?"

    # We use "cd" instead of specifying file paths directly in the "source" comment, because these comments do not change when files are renamed or moved.
    # Moreover, we need to specify exact paths in "source" to use links to function and variables between files (language server).
    cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")")" || exit "$?"

    # We don't use "set -e" for all scripts, but it is useful to simplify testing imports, so we enable it here and disable below.
    # Why it is bad see:
    # - https://unix.stackexchange.com/questions/405382/set-e-inside-a-bash-function
    # - http://mywiki.wooledge.org/BashFAQ/105/Answers
    set -e
  }
}

# Imports
# ...

# (REUSE) Prepare after imports
{
  # Disable "set -e" because it's behaviour is less understandable
  set +e

  eval "cd \"\${source_previous_directory_$(get_text_hash "${BASH_SOURCE[*]}")}\"" || exit "$?"

  # Unset script-scope variables, to skip references on them between files
  unset "source_previous_directory_$(get_text_hash "${BASH_SOURCE[*]}")" || exit "$?"
}

# "eval"s below is needed for useful output, because "set -o pipefail" sends errors from &2 to &1, and, as a result, no error is printed when executing command is failed a subshell.
# We use these "eval"s only in functions that are outside of "(REUSE)" blocks, because the goal of "(REUSE)" blocks here is to make them as independent as possible.
{
  # shellcheck disable=SC2016
  _n2038_eval='return_code="$?" && echo "Return code is ${return_code} in file ${BASH_SOURCE}:${LINENO}${FUNCNAME[0]:+" (function ${FUNCNAME[0]}"})"'

  # Special code to execute instead of 'return "$?"' to make it more debuggable
  export n2038_eval_for_return="${_n2038_eval} && return \"\${return_code}\" || return \"\$?\""

  # Special code to execute instead of 'exit "$?"' to make it more debuggable
  export n2038_eval_for_exit="${_n2038_eval} && exit \"\${return_code}\" || exit \"\$?\""

  # Unset script-scope variables, to skip references on them between files
  unset _n2038_eval
}
