#!/bin/bash

# (REUSE)
# Code that must be included in every script to make it fully independent and compatible with refactoring in IDEs.
# Advices for code writing:
# - It is recommended to use lower case variables' names, cause some IDE ignore "not found variables" errors if they are upper cased;
# - File names and function names in them must differ, cause some IDE sourcing them for completion, if they are exact.
{
  # Fail command if any of pipeline blocks fail
  set -o pipefail

  # Special function to get current script file hash
  function get_text_hash() {
    echo "${*}" | sha256sum | cut -d ' ' -f 1 || return "$?"
    return 0
  }

  # Source this file only if wasn't sourced already
  {
    current_file_path="$(realpath "${BASH_SOURCE[0]}")" || exit "$?"
    current_file_hash="$(echo "${current_file_path}" | sha256sum | cut -d ' ' -f 1)" || exit "$?"
    current_file_is_sourced_variable_name="FILE_IS_SOURCED_${current_file_hash^^}"
    current_file_is_sourced="$(eval "echo \"\${${current_file_is_sourced_variable_name}}\"")" || exit "$?"
    if [ -n "${current_file_is_sourced}" ]; then
      return
    fi
    eval "export ${current_file_is_sourced_variable_name}=1" || exit "$?"
    if ((IS_DEBUG_BASH)); then
      if [ "${0}" == "${BASH_SOURCE[0]}" ]; then
        echo "Executing \"${current_file_path}\"..." >&2
      else
        echo "Sourcing \"${current_file_path}\"..." >&2
      fi
    fi
    # Unset script-scope variables, to skip references on them between files
    unset current_file_path current_file_hash current_file_is_sourced_variable_name current_file_is_sourced
  }

  # Prepare before imports
  {
    # Because variables is the same when sourcing, we depend on file hash.
    # Also, we don't use variable for variable name here, because it will fall in the same problem.
    # We must pass "${BASH_SOURCE[*]}" as a variable and not define it in the function itself, because Bash will replace it there.
    eval "source_previous_directory_$(get_text_hash "${BASH_SOURCE[*]}")=\"${PWD}\"" || exit "$?"

    # We use "cd" instead of specifying file paths directly in the "source" comment, because these comments do not change when files are renamed or moved.
    # Moreover, we need to specify exact paths in "source" to use links to function and variables between files (language server).
    cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")")" || exit "$?"

    # We don't use "set -e" for all scripts, but it is useful to simplify testing imports, so we enable it here and disable below.
    # Why it is bad see:
    # - https://unix.stackexchange.com/questions/405382/set-e-inside-a-bash-function
    # - http://mywiki.wooledge.org/BashFAQ/105/Answers
    set -e
  }
}

# Imports
# ...

# (REUSE) Prepare after imports
{
  # Disable "set -e" because it's behaviour is less understandable
  set +e

  eval "cd \"\${source_previous_directory_$(get_text_hash "${BASH_SOURCE[*]}")}\"" || exit "$?"

  # Unset script-scope variables, to skip references on them between files
  unset "source_previous_directory_$(get_text_hash "${BASH_SOURCE[*]}")" || exit "$?"
}

# ========================================
# Colors for messages
# ========================================
# Color for message
export c_info='\e[0;36m'
# Color for successful execution
export c_success='\e[0;32m'
# Color for highlighted text
export c_highlight='\e[1;95m'
# Color for error
export c_warning='\e[0;33m'
# Color for error
export c_error='\e[0;31m'

# Reset color
export c_reset='\e[0m'

# Special text that will be replaced with the previous one
export c_return='COLOR_RETURN'
# ========================================

# Prints a message with the specified prefix and text
function print_color_message() {
  local main_color="${1}" && shift
  local text="${1}" && shift

  # Replaces the special string with the text color
  # (don't forget to escape the first color character with an additional backslash)
  if [ -n "${main_color}" ]; then
    text=$(echo -e "${text}" | sed -E "s/${c_return}/\\${main_color}/g") || return "$?"
  else
    text=$(echo -e "${text}" | sed -E "s/${c_return}//g") || return "$?"
  fi

  # shellcheck disable=SC2320
  echo -e "${@}" "${main_color}${text}${c_reset}" || return "$?"

  return 0
}

# Prints a message with information
function print_info() {
  local text="${1}" && shift
  declare -a extra_args=()
  if [ "${text}" = "-n" ]; then
    extra_args=("${extra_args[@]}" -n)
    local text="${1}" && shift
  fi
  print_color_message "${c_info}" "${text}" "${extra_args[@]}" >&2 || return "$?"
  return 0
}

# Prints a message about success
function print_success() {
  local text="${1}" && shift
  declare -a extra_args=()
  if [ "${text}" = "-n" ]; then
    extra_args=("${extra_args[@]}" -n)
    local text="${1}" && shift
  fi
  print_color_message "${c_success}" "${text}" "${extra_args[@]}" >&2 || return "$?"
  return 0
}

# Prints highlighted message
function print_highlight() {
  local text="${1}" && shift
  declare -a extra_args=()
  if [ "${text}" = "-n" ]; then
    extra_args=("${extra_args[@]}" -n)
    local text="${1}" && shift
  fi
  print_color_message "${c_highlight}" "${text}" "${extra_args[@]}" >&2 || return "$?"
  return 0
}

# Prints a warning message
function print_warning() {
  local text="${1}" && shift
  declare -a extra_args=()
  if [ "${text}" = "-n" ]; then
    extra_args=("${extra_args[@]}" -n)
    local text="${1}" && shift
  fi
  print_color_message "${c_warning}" "${text}" "${extra_args[@]}" >&2 || return "$?"
  return 0
}

# Prints an error message
function print_error() {
  local text="${1}" && shift
  declare -a extra_args=()
  if [ "${text}" = "-n" ]; then
    extra_args=("${extra_args[@]}" -n)
    local text="${1}" && shift
  fi
  print_color_message "${c_error}" "${text}" "${extra_args[@]}" >&2 || return "$?"
  return 0
}

# Prints bold line in symbols
function print_line_bold() {
  echo "$@" "========================================" >&2
  return 0
}

# Prints thin line in symbols
function print_line_thin() {
  echo "$@" "----------------------------------------" >&2
  return 0
}

# Add the ability to execute this script by itself (for debugging)
{
  if [ "${0}" == "${BASH_SOURCE[0]}" ]; then
    print_color_message "${@}"
  fi
}
